use std::fs::File;
use std::io::Write;

use wgsl_to_wgpu::{MatrixVectorTypes, WriteOptions, create_shader_module};

fn write_header(f: &mut impl Write) -> Result<(), std::io::Error> {
    writeln!(
        f,
        "// File automatically generated by wgsl_to_wgpu in build.rs"
    )?;
    writeln!(f, "// Changes made to this file will not be saved.")?;
    Ok(())
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut mod_file = File::create("src/shaders/mod.rs")?;
    write_header(&mut mod_file)?;
    // TODO: make this automatically pick up all shaders
    const SHADERS: &[&str] = &["compute_shader", "render_shader"];
    for name in SHADERS {
        let wgsl_file = format!("src/shaders/{name}.wgsl");
        let wgsl_source = std::fs::read_to_string(&wgsl_file)?;
        println!("cargo:rerun-if-changed={wgsl_file}");

        let mut rust_file = File::create(format!("src/shaders/{name}.rs"))?;
        write_header(&mut rust_file)?;
        writeln!(&mut rust_file, "#![allow(dead_code, non_snake_case)]")?;

        let text = &create_shader_module(
            &wgsl_source,
            &format!("{name}.wgsl"),
            WriteOptions {
                derive_bytemuck_vertex: true,
                derive_bytemuck_host_shareable: true,
                matrix_vector_types: MatrixVectorTypes::Glam,
                rustfmt: true,
                validate: Some(Default::default()),
                ..Default::default()
            },
        )
        .inspect_err(|error| error.emit_to_stderr_with_path(&wgsl_source, &wgsl_file))
        .map_err(|_| "Failed to validate shader")?;

        writeln!(&mut rust_file, "{}", text)?;
        writeln!(&mut mod_file, "pub mod {name};")?;
    }

    Ok(())
}
